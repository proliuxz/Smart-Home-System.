###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                21/Aug/2013  01:48:17 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\Te\Source\Enddevice.c         #
#    Command line       =  -f "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\Te\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ               #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\Te\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg" (-DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\Te\Source\Enddevice.c" -D    #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC "D:\Texas               #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\CoordinatorEB\List\" -lA   #
#                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\Te\CC2530DB\CoordinatorEB\Li #
#                          st\" --diag_suppress Pe001,Pa010 -o "D:\Texas      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\CoordinatorEB\Obj\" -e     #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Texas                  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\" -I "D:\Texas             #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\SOURCE\" -I "D:\Texas   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\ZMAIN\TI2530DB\"  #
#                          -I "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\Te\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\MT\" -I "D:\Texas                     #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          HAL\INCLUDE\" -I "D:\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          HAL\TARGET\CC2530EB\" -I "D:\Texas                 #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          OSAL\MCU\CCSOC\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          OSAL\INCLUDE\" -I "D:\Texas                        #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\AF\" -I "D:\Texas Instruments\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\NWK\" -I "D:\Texas   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SEC\" -I "D:\Texas                           #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SAPI\" -I "D:\Texas                          #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SYS\" -I "D:\Texas                           #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\" -I "D:\Texas                           #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          ZMAC\F8W\" -I "D:\Texas Instruments\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\ZMAC\" -I "D:\Texas        #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SDATA\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\INCLUDE\" -I "D:\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\HIGH_LEVEL\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\" -I "D:\Texas                 #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\Te\CC2530DB\CoordinatorEB\Lis #
#                          t\Enddevice.lst                                    #
#    Object file        =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\Te\CC2530DB\CoordinatorEB\Obj #
#                          \Enddevice.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Te\Source\Enddevice.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include <string.h>
      7          #include "Common.h"
      8          #include "DebugTrace.h"
      9          #include "ioCC2530.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     10          #define LED2 P1_2
     11          #define ECHO P1_3
     12          #define ALARM P2_0
     13          #define uchar unsigned char
     14          #define uint unsigned int
     15          
     16          #if !defined( WIN32 )
     17            #include "OnBoard.h"
     18          #endif
     19          
     20          /* HAL */
     21          #include "hal_lcd.h"
     22          #include "hal_led.h"
     23          #include "hal_key.h"
     24          #include "hal_uart.h"
     25          
     26          #define SEND_DATA_EVENT 0x01
     27          
     28          void SetMessage(unsigned char temp[],int n);

   \                                 In  segment XDATA_ROM_C, align 1
     29          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
     30          {
     31            GENERICAPP_CLUSTERID
     32          };
     33          

   \                                 In  segment XDATA_ROM_C, align 1
     34          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F0100     DW 3844, 1
   \   000005   0000         DB 0, 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
     35          {
     36            GENERICAPP_ENDPOINT,              //  int Endpoint;
     37            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
     38            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     39            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     40            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
     41            
     42            0,
     43            (cId_t*)NULL,
     44            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     45            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
     46          };
     47          
     48          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     49          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     50          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          byte GenericApp_TransID; 
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     53          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
     54          void GenericApp_SendTheMessage(void);
     55          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     56          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
     57          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     58            halUARTCfg_t uartConfig;
     59          
     60            GenericApp_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#GenericApp_TaskID
   \   000008   F0           MOVX    @DPTR,A
     61            GenericApp_NwkState = DEV_INIT;
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000E   F0           MOVX    @DPTR,A
     62            GenericApp_TransID = 0;
   \   00000F   E4           CLR     A
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   F0           MOVX    @DPTR,A
     63          
     64            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000014   740A         MOV     A,#0xa
   \   000016   90....       MOV     DPTR,#GenericApp_epDesc
   \   000019   F0           MOVX    @DPTR,A
     65            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00001A   90....       MOV     DPTR,#(GenericApp_epDesc + 1)
   \   00001D   74..         MOV     A,#(GenericApp_TaskID & 0xff)
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#((GenericApp_TaskID >> 8) & 0xff)
   \   000023   F0           MOVX    @DPTR,A
     66            GenericApp_epDesc.simpleDesc
     67                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000024   90....       MOV     DPTR,#(GenericApp_epDesc + 3)
   \   000027   74..         MOV     A,#(GenericApp_SimpleDesc & 0xff)
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#((GenericApp_SimpleDesc >> 8) & 0xff)
   \   00002D   F0           MOVX    @DPTR,A
     68                      
     69            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00002E   E4           CLR     A
   \   00002F   90....       MOV     DPTR,#(GenericApp_epDesc + 5)
   \   000032   F0           MOVX    @DPTR,A
     70            afRegister( &GenericApp_epDesc );
   \   000033                ; Setup parameters for call to function afRegister
   \   000033   7A..         MOV     R2,#(GenericApp_epDesc & 0xff)
   \   000035   7B..         MOV     R3,#((GenericApp_epDesc >> 8) & 0xff)
   \   000037   12....       LCALL   ??afRegister?relay
     71          }
   \   00003A   D083         POP     DPH
   \   00003C   D082         POP     DPL
   \   00003E   02....       LJMP    ?BRET
     72          
     73          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
     75          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     76            afIncomingMSGPacket_t *MSGpkt;
     77            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??GenericApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??GenericApp_ProcessEvent_0:
   \   000011   6046         JZ      ??GenericApp_ProcessEvent_1
     78            {
     79              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000013                ; Setup parameters for call to function osal_msg_receive
   \   000013   8028         SJMP    ??GenericApp_ProcessEvent_2
     80              while ( MSGpkt )
     81              {
     82                switch ( MSGpkt->hdr.event )
   \                     ??GenericApp_ProcessEvent_3:
   \   000015   85..82       MOV     DPL,?V0 + 0
   \   000018   85..83       MOV     DPH,?V0 + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   64D1         XRL     A,#0xd1
   \   00001E   7016         JNZ     ??GenericApp_ProcessEvent_4
     83                {
     84                  case ZDO_STATE_CHANGE:
     85                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   90....       MOV     DPTR,#GenericApp_NwkState
   \   000025   F0           MOVX    @DPTR,A
     86                    if (GenericApp_NwkState == DEV_END_DEVICE)
   \   000026   6406         XRL     A,#0x6
   \   000028   700C         JNZ     ??GenericApp_ProcessEvent_4
     87                    {
     88                      osal_set_event(GenericApp_TaskID,SEND_DATA_EVENT);
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_set_event?relay
     89                    }
     90                    break;
     91          
     92                  default:
     93                    break;
     94                }
     95          
     96                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
     97                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_2:
   \   00003D   90....       MOV     DPTR,#GenericApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
     98              }
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   7002         JNZ     ??GenericApp_ProcessEvent_5
   \   00004D   E5..         MOV     A,?V0 + 1
   \                     ??GenericApp_ProcessEvent_5:
   \   00004F   70C4         JNZ     ??GenericApp_ProcessEvent_3
     99              return (events ^ SYS_EVENT_MSG);
   \   000051   EE           MOV     A,R6
   \   000052   FA           MOV     R2,A
   \   000053   7480         MOV     A,#-0x80
   \   000055   6F           XRL     A,R7
   \                     ??GenericApp_ProcessEvent_6:
   \   000056   FB           MOV     R3,A
   \   000057   8023         SJMP    ??GenericApp_ProcessEvent_7
    100            }
    101            if ( events & SEND_DATA_EVENT )
   \                     ??GenericApp_ProcessEvent_1:
   \   000059   EE           MOV     A,R6
   \   00005A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005C   501A         JNC     ??GenericApp_ProcessEvent_8
    102            {
    103              GenericApp_SendTheMessage();
   \   00005E                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   00005E   12....       LCALL   ??GenericApp_SendTheMessage?relay
    104              osal_start_timerEx( GenericApp_TaskID,SEND_DATA_EVENT,1000);
   \   000061                ; Setup parameters for call to function osal_start_timerEx
   \   000061   7CE8         MOV     R4,#-0x18
   \   000063   7D03         MOV     R5,#0x3
   \   000065   7A01         MOV     R2,#0x1
   \   000067   7B00         MOV     R3,#0x0
   \   000069   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??osal_start_timerEx?relay
    105              return (events^SEND_DATA_EVENT);
   \   000071   7401         MOV     A,#0x1
   \   000073   6E           XRL     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   80DE         SJMP    ??GenericApp_ProcessEvent_6
    106            }
    107            return 0;
   \                     ??GenericApp_ProcessEvent_8:
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_7:
   \   00007C   7F04         MOV     R7,#0x4
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA
    108          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    109          void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    110          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    111            unsigned char theMessageData[5] = "0000";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant "0000">` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant "0000">` & 0xff)
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    112            SetMessage(theMessageData,5);
   \   00001F                ; Setup parameters for call to function SetMessage
   \   00001F   7C05         MOV     R4,#0x5
   \   000021   FD           MOV     R5,A
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??SetMessage?relay
    113            afAddrType_t my_DstAddr;
    114            my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
   \   00002F   740D         MOV     A,#0xd
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7402         MOV     A,#0x2
   \   000036   F0           MOVX    @DPTR,A
    115            my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
   \   000037   740E         MOV     A,#0xe
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   740A         MOV     A,#0xa
   \   00003E   F0           MOVX    @DPTR,A
    116            my_DstAddr.addr.shortAddr=0xFFFF;
   \   00003F   7405         MOV     A,#0x5
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   74FF         MOV     A,#-0x1
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
    117            AF_DataRequest(&my_DstAddr
    118            ,&GenericApp_epDesc
    119            ,GENERICAPP_CLUSTERID
    120            ,osal_strlen("0000")+1
    121            ,theMessageData
    122            ,&GenericApp_TransID
    123            ,AF_DISCV_ROUTE
    124            ,AF_DEFAULT_RADIUS);
   \   000049                ; Setup parameters for call to function AF_DataRequest
   \   000049   75..1E       MOV     ?V0 + 0,#0x1e
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75....       MOV     ?V0 + 0,#(GenericApp_TransID & 0xff)
   \   000054   75....       MOV     ?V0 + 1,#((GenericApp_TransID >> 8) & 0xff)
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7403         MOV     A,#0x3
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   8582..       MOV     ?V0 + 0,DPL
   \   000064   8583..       MOV     ?V0 + 1,DPH
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C                ; Setup parameters for call to function osal_strlen
   \   00006C   7A..         MOV     R2,#(`?<Constant "0000">_1` & 0xff)
   \   00006E   7B..         MOV     R3,#((`?<Constant "0000">_1` >> 8) & 0xff)
   \   000070   12....       LCALL   ??osal_strlen?relay
   \   000073   8A..         MOV     ?V0 + 0,R2
   \   000075   8B..         MOV     ?V0 + 1,R3
   \   000077   7401         MOV     A,#0x1
   \   000079   25..         ADD     A,?V0 + 0
   \   00007B   F5..         MOV     ?V0 + 0,A
   \   00007D   E4           CLR     A
   \   00007E   35..         ADDC    A,?V0 + 1
   \   000080   F5..         MOV     ?V0 + 1,A
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   75..01       MOV     ?V0 + 0,#0x1
   \   00008A   75..00       MOV     ?V0 + 1,#0x0
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   7920         MOV     R1,#0x20
   \   000094   7C..         MOV     R4,#(GenericApp_epDesc & 0xff)
   \   000096   7D..         MOV     R5,#((GenericApp_epDesc >> 8) & 0xff)
   \   000098   740E         MOV     A,#0xe
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   AA82         MOV     R2,DPL
   \   00009F   AB83         MOV     R3,DPH
   \   0000A1   12....       LCALL   ??AF_DataRequest?relay
   \   0000A4   7409         MOV     A,#0x9
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    125          }
   \   0000A9   7411         MOV     A,#0x11
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   7F02         MOV     R7,#0x2
   \   0000B0   02....       LJMP    ?BANKED_LEAVE_XDATA
    126          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    127          void SetMessage(unsigned char temp[],int n)
   \                     SetMessage:
    128          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    129            P0SEL|=0x0c;
   \   000005   43F30C       ORL     0xf3,#0xc
   \   000008   E5F3         MOV     A,0xf3
    130           ADCCFG|=0x10;
   \   00000A   43F210       ORL     0xf2,#0x10
    131           P0INP|=0x10;
   \   00000D   438F10       ORL     0x8f,#0x10
    132           P2DIR |= 0X01;
   \   000010   43FF01       ORL     0xff,#0x1
    133           P1DIR |= 0X07; 
   \   000013   43FE07       ORL     0xfe,#0x7
   \   000016   E5FE         MOV     A,0xfe
    134              LED2=1;
   \   000018   D292         SETB    0x90.2
    135              ALARM = 0;
   \   00001A   C2A0         CLR     0xa0.0
    136              temp[0]='0';
   \   00001C   7430         MOV     A,#0x30
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   F0           MOVX    @DPTR,A
    137              temp[1]='0';
   \   000023   A3           INC     DPTR
   \   000024   A882         MOV     R0,DPL
   \   000026   A983         MOV     R1,DPH
   \   000028   F0           MOVX    @DPTR,A
    138              temp[2]='0';
   \   000029   EA           MOV     A,R2
   \   00002A   2402         ADD     A,#0x2
   \   00002C   FC           MOV     R4,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FD           MOV     R5,A
   \   000031   7430         MOV     A,#0x30
   \   000033   8C82         MOV     DPL,R4
   \   000035   8D83         MOV     DPH,R5
   \   000037   F0           MOVX    @DPTR,A
    139              temp[3]='0';
   \   000038   EA           MOV     A,R2
   \   000039   2403         ADD     A,#0x3
   \   00003B   FE           MOV     R6,A
   \   00003C   EB           MOV     A,R3
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   FF           MOV     R7,A
   \   000040   7430         MOV     A,#0x30
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   F0           MOVX    @DPTR,A
    140              temp[4]='\n';
   \   000047   740A         MOV     A,#0xa
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
    141              if(P0_7)
   \   000052   A287         MOV     C,0x80.7
   \   000054   5009         JNC     ??SetMessage_0
    142              {
    143              	temp[0]='1';
   \   000056   7431         MOV     A,#0x31
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   F0           MOVX    @DPTR,A
    144                  LED2=0;
   \   00005D   C292         CLR     0x90.2
    145              }
    146              if(!(P0&0x02))
   \                     ??SetMessage_0:
   \   00005F   A281         MOV     C,0x80.1
   \   000061   4007         JC      ??SetMessage_1
    147                {
    148                  temp[1]='1';
   \   000063   7431         MOV     A,#0x31
   \   000065   8882         MOV     DPL,R0
   \   000067   8983         MOV     DPH,R1
   \   000069   F0           MOVX    @DPTR,A
    149                }
    150              if(!P1_3)
   \                     ??SetMessage_1:
   \   00006A   A293         MOV     C,0x90.3
   \   00006C   4007         JC      ??SetMessage_2
    151              {
    152                temp[2]='1';
   \   00006E   7431         MOV     A,#0x31
   \   000070   8C82         MOV     DPL,R4
   \   000072   8D83         MOV     DPH,R5
   \   000074   F0           MOVX    @DPTR,A
    153              }
    154            if(P0&0x20)
   \                     ??SetMessage_2:
   \   000075   A285         MOV     C,0x80.5
   \   000077   5009         JNC     ??SetMessage_3
    155              {
    156               temp[3]='1';
   \   000079   7431         MOV     A,#0x31
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   F0           MOVX    @DPTR,A
    157               ALARM=1;
   \   000080   D2A0         SETB    0xa0.0
    158              }
    159              
    160          }
   \                     ??SetMessage_3:
   \   000082   7F01         MOV     R7,#0x1
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000087                REQUIRE _A_P0
   \   000087                REQUIRE P0INP
   \   000087                REQUIRE _A_P1
   \   000087                REQUIRE _A_P2
   \   000087                REQUIRE ADCCFG
   \   000087                REQUIRE P0SEL
   \   000087                REQUIRE P1DIR
   \   000087                REQUIRE P2DIR

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0000">`:
   \   000000   30303030     DB "0000"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0000">_1`:
   \   000000   30303030     DB "0000"
   \            00      

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    2      0      0
       -> afRegister                    4      0      0
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> osal_start_timerEx            0      0     24
     GenericApp_SendTheMessage          2      0     48
       -> SetMessage                    0      0     54
       -> osal_strlen                   0      0     64
       -> AF_DataRequest                0      0     72
     SetMessage                         1      0     36


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _A_P0                                1
     P0INP                                1
     _A_P1                                1
     _A_P2                                1
     ADCCFG                               1
     P0SEL                                1
     P1DIR                                1
     P2DIR                                1
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_TransID                   1
     GenericApp_NwkState                  1
     GenericApp_Init                     65
     GenericApp_ProcessEvent            129
     GenericApp_SendTheMessage          179
     SetMessage                         135
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ??SetMessage?relay                   6
     ?<Constant "0000">                   5
     ?<Constant "0000">_1                 5

 
 508 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   8 bytes in segment SFR_AN
  24 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 532 bytes of CODE  memory
  24 bytes of CONST memory
   0 bytes of DATA  memory (+ 8 bytes shared)
   9 bytes of XDATA memory

Errors: none
Warnings: none
