###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                22/Aug/2013  15:11:53 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\Te\Source\Enddevice.c         #
#    Command line       =  -f "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\Te\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ               #
#                          -DROOT=__near_func -DBLINK_LEDS) -f "D:\Texas      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\Tools\CC2530DB\f8 #
#                          wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0     #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\Te\Source\Enddevice.c" -D    #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D xPOWER_SAVING -lC "D:\Texas                     #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\EndDeviceEB\List\" -lA     #
#                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\Te\CC2530DB\EndDeviceEB\List #
#                          \" --diag_suppress Pe001,Pa010 -o "D:\Texas        #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\EndDeviceEB\Obj\" -e       #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Texas                  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\" -I "D:\Texas             #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\SOURCE\" -I "D:\Texas   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\ZMAIN\TI2530DB\"  #
#                          -I "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Samples\Te\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\MT\" -I "D:\Texas                     #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          HAL\INCLUDE\" -I "D:\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          HAL\TARGET\CC2530EB\" -I "D:\Texas                 #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          OSAL\MCU\CCSOC\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          OSAL\INCLUDE\" -I "D:\Texas                        #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\AF\" -I "D:\Texas Instruments\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\NWK\" -I "D:\Texas   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SEC\" -I "D:\Texas                           #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SAPI\" -I "D:\Texas                          #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SYS\" -I "D:\Texas                           #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\" -I "D:\Texas                           #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          ZMAC\F8W\" -I "D:\Texas Instruments\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\ZMAC\" -I "D:\Texas        #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SADDR\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SDATA\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\INCLUDE\" -I "D:\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\HIGH_LEVEL\" -I "D:\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\" -I "D:\Texas                 #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\Te\CC2530DB\EndDeviceEB\List\ #
#                          Enddevice.lst                                      #
#    Object file        =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\Te\CC2530DB\EndDeviceEB\Obj\E #
#                          nddevice.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Te\Source\Enddevice.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "Common.h"
      7          #include "DebugTrace.h"
      8          #include "ioCC2530.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
      9          #include <string.h>
     10          #include "gm.h"

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant unsigned char getVoltage(void)
   \                     getVoltage:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   43F210       ORL     0xf2,#0x10
   \   000008   438F10       ORL     0x8f,#0x10
   \   00000B   43B684       ORL     0xb6,#0x84
   \   00000E   E5B6         MOV     A,0xb6
   \   000010   43B440       ORL     0xb4,#0x40
   \                     ??getVoltage_0:
   \   000013   E5B4         MOV     A,0xb4
   \   000015   A2E7         MOV     C,0xE0 /* A   */.7
   \   000017   50FA         JNC     ??getVoltage_0
   \   000019   E5BA         MOV     A,0xba
   \   00001B   13           RRC     A
   \   00001C   13           RRC     A
   \   00001D   543F         ANL     A,#0x3f
   \   00001F   FA           MOV     R2,A
   \   000020   ACBB         MOV     R4,0xbb
   \   000022   8C82         MOV     DPL,R4
   \   000024   8582..       MOV     ?V0 + 0,DPL
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   7406         MOV     A,#0x6
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?S_SHL
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V0 + 0
   \   000034   F5..         MOV     ?V0 + 0,A
   \   000036   75..00       MOV     ?V0 + 2,#0x0
   \   000039   75..00       MOV     ?V0 + 3,#0x0
   \   00003C   90....       MOV     DPTR,#__Constant_21
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   79..         MOV     R1,#?V0 + 4
   \   000048   12....       LCALL   ?L_MUL
   \   00004B   90....       MOV     DPTR,#__Constant_1fff
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?L_MOV_X
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   79..         MOV     R1,#?V0 + 4
   \   000057   12....       LCALL   ?L_DIV_MOD
   \   00005A   A9..         MOV     R1,?V0 + 0
   \   00005C   7F08         MOV     R7,#0x8
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000061                REQUIRE P0INP
   \   000061                REQUIRE ADCCON1
   \   000061                REQUIRE ADCCON3
   \   000061                REQUIRE ADCL
   \   000061                REQUIRE ADCH
   \   000061                REQUIRE ADCCFG
     11          #define LED2 P1_2
     12          #define ECHO P1_3
     13          #define ALARM P2_0
     14          #define uchar unsigned char
     15          #define uint unsigned int
     16          
     17          #define SEND_DATA_EVENT 0x01
     18          
     19          #if !defined( WIN32 )
     20            #include "OnBoard.h"
     21          #endif
     22          
     23          /* HAL */
     24          #include "hal_lcd.h"
     25          #include "hal_led.h"
     26          #include "hal_key.h"
     27          #include "hal_uart.h"
     28          
     29          #define SEND_DATA_EVENT 0x01
     30          

   \                                 In  segment XDATA_ROM_C, align 1
     31          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
     32          {
     33            GENERICAPP_CLUSTERID
     34          };
     35          void SetMessage(unsigned char temp[],int n);
     36          

   \                                 In  segment XDATA_ROM_C, align 1
     37          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F0100     DW 3844, 1
   \   000005   0000         DB 0, 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
     38          {
     39            GENERICAPP_ENDPOINT,              //  int Endpoint;
     40            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
     41            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     42            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     43            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
     44            
     45            0,
     46            (cId_t*)NULL,
     47            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     48            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
     49          };
     50          
     51          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     53          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     54          byte GenericApp_TransID; 
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     56          void SampleApp_HandleKeys(uint8 shift,uint8 keys);
     57          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
     58          void GenericApp_SendTheMessage(void);
     59          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     60          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
     61          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     62            halUARTCfg_t uartConfig;
     63            GenericApp_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#GenericApp_TaskID
   \   000008   F0           MOVX    @DPTR,A
     64            GenericApp_NwkState = DEV_INIT;
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000E   F0           MOVX    @DPTR,A
     65            GenericApp_TransID = 0;
   \   00000F   E4           CLR     A
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   F0           MOVX    @DPTR,A
     66          
     67            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000014   740A         MOV     A,#0xa
   \   000016   90....       MOV     DPTR,#GenericApp_epDesc
   \   000019   F0           MOVX    @DPTR,A
     68            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00001A   90....       MOV     DPTR,#(GenericApp_epDesc + 1)
   \   00001D   74..         MOV     A,#(GenericApp_TaskID & 0xff)
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#((GenericApp_TaskID >> 8) & 0xff)
   \   000023   F0           MOVX    @DPTR,A
     69            GenericApp_epDesc.simpleDesc
     70                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000024   90....       MOV     DPTR,#(GenericApp_epDesc + 3)
   \   000027   74..         MOV     A,#(GenericApp_SimpleDesc & 0xff)
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#((GenericApp_SimpleDesc >> 8) & 0xff)
   \   00002D   F0           MOVX    @DPTR,A
     71                      
     72            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00002E   E4           CLR     A
   \   00002F   90....       MOV     DPTR,#(GenericApp_epDesc + 5)
   \   000032   F0           MOVX    @DPTR,A
     73            afRegister( &GenericApp_epDesc );
   \   000033                ; Setup parameters for call to function afRegister
   \   000033   7A..         MOV     R2,#(GenericApp_epDesc & 0xff)
   \   000035   7B..         MOV     R3,#((GenericApp_epDesc >> 8) & 0xff)
   \   000037   12....       LCALL   ??afRegister?relay
     74          }
   \   00003A   D083         POP     DPH
   \   00003C   D082         POP     DPL
   \   00003E   02....       LJMP    ?BRET
     75          
     76          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
     78          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     79            afIncomingMSGPacket_t *MSGpkt;
     80            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??GenericApp_ProcessEvent_0
   \   000011   E9           MOV     A,R1
   \                     ??GenericApp_ProcessEvent_0:
   \   000012   605D         JZ      ??GenericApp_ProcessEvent_1
     81            {
     82              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   8021         SJMP    ??GenericApp_ProcessEvent_2
     83              while ( MSGpkt )
     84              {
     85                switch ( MSGpkt->hdr.event )
     86                {
     87                  case AF_INCOMING_MSG_CMD:
     88                  GenericApp_MessageMSGCB(MSGpkt);
     89                    break;
     90                  case ZDO_STATE_CHANGE:
     91                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_3:
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001F   F0           MOVX    @DPTR,A
     92                    if (GenericApp_NwkState == DEV_END_DEVICE)
   \   000020   6406         XRL     A,#0x6
   \   000022   700C         JNZ     ??GenericApp_ProcessEvent_4
     93                    {
     94                      osal_set_event(GenericApp_TaskID,SEND_DATA_EVENT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A01         MOV     R2,#0x1
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_set_event?relay
     95                    }
     96                    break;
     97          
     98                  default:
     99                    break;
    100                }
    101          
    102                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   000030                ; Setup parameters for call to function osal_msg_deallocate
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   ??osal_msg_deallocate?relay
    103                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000037                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_2:
   \   000037   90....       MOV     DPTR,#GenericApp_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??osal_msg_receive?relay
   \   00003F   8A..         MOV     ?V0 + 2,R2
   \   000041   8B..         MOV     ?V0 + 3,R3
   \   000043   AE..         MOV     R6,?V0 + 2
   \   000045   AF..         MOV     R7,?V0 + 3
   \   000047   EE           MOV     A,R6
   \   000048   7001         JNZ     ??GenericApp_ProcessEvent_5
   \   00004A   EF           MOV     A,R7
   \                     ??GenericApp_ProcessEvent_5:
   \   00004B   601B         JZ      ??GenericApp_ProcessEvent_6
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   E0           MOVX    A,@DPTR
   \   000052   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   000055   00           DB        0
   \   000056   02           DB        2
   \   000057   1A           DB        26
   \   000058   ....         DW        ??GenericApp_ProcessEvent_7
   \   00005A   D1           DB        209
   \   00005B   ....         DW        ??GenericApp_ProcessEvent_3
   \   00005D   ....         DW        ??GenericApp_ProcessEvent_4
   \                     ??GenericApp_ProcessEvent_7:
   \   00005F                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   ??GenericApp_MessageMSGCB?relay
   \   000066   80C8         SJMP    ??GenericApp_ProcessEvent_4
    104              }
    105              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_6:
   \   000068   AA..         MOV     R2,?V0 + 0
   \   00006A   7480         MOV     A,#-0x80
   \   00006C   65..         XRL     A,?V0 + 1
   \   00006E   FB           MOV     R3,A
   \   00006F   8025         SJMP    ??GenericApp_ProcessEvent_8
    106            }
    107            if ( events & SEND_DATA_EVENT )
   \                     ??GenericApp_ProcessEvent_1:
   \   000071   EA           MOV     A,R2
   \   000072   A2E0         MOV     C,0xE0 /* A   */.0
   \   000074   501C         JNC     ??GenericApp_ProcessEvent_9
    108            {
    109              GenericApp_SendTheMessage();
   \   000076                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000076   12....       LCALL   ??GenericApp_SendTheMessage?relay
    110              osal_start_timerEx( GenericApp_TaskID,SEND_DATA_EVENT,1000);
   \   000079                ; Setup parameters for call to function osal_start_timerEx
   \   000079   7CE8         MOV     R4,#-0x18
   \   00007B   7D03         MOV     R5,#0x3
   \   00007D   7A01         MOV     R2,#0x1
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   90....       MOV     DPTR,#GenericApp_TaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ??osal_start_timerEx?relay
    111              return (events^SEND_DATA_EVENT);
   \   000089   7401         MOV     A,#0x1
   \   00008B   65..         XRL     A,?V0 + 0
   \   00008D   FA           MOV     R2,A
   \   00008E   AB..         MOV     R3,?V0 + 1
   \   000090   8004         SJMP    ??GenericApp_ProcessEvent_8
    112            }
    113            return 0;
   \                     ??GenericApp_ProcessEvent_9:
   \   000092   7A00         MOV     R2,#0x0
   \   000094   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_8:
   \   000096   7F04         MOV     R7,#0x4
   \   000098   02....       LJMP    ?BANKED_LEAVE_XDATA
    114          }
    115          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt)
   \                     GenericApp_MessageMSGCB:
    117          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    118            unsigned char buffer[10];
    119            switch(pkt->clusterId)
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6401         XRL     A,#0x1
   \   000015   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   000019   7044         JNZ     ??GenericApp_MessageMSGCB_1
    120            {
    121            case GENERICAPP_CLUSTERID:
    122            osal_memcpy(&buffer,pkt->cmd.Data,10);
   \   00001B                ; Setup parameters for call to function osal_memcpy
   \   00001B   EA           MOV     A,R2
   \   00001C   2421         ADD     A,#0x21
   \   00001E   F582         MOV     DPL,A
   \   000020   EB           MOV     A,R3
   \   000021   3400         ADDC    A,#0x0
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 1,A
   \   00002C   75..00       MOV     ?V0 + 2,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   7C0A         MOV     R4,#0xa
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??osal_memcpy?relay
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
    123            if(buffer[0]=='1')
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6431         XRL     A,#0x31
   \   000052   7004         JNZ     ??GenericApp_MessageMSGCB_2
    124            P1_0=1;
   \   000054   D290         SETB    0x90.0
   \   000056   8007         SJMP    ??GenericApp_MessageMSGCB_1
    125            if(buffer[0]=='0')
   \                     ??GenericApp_MessageMSGCB_2:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6430         XRL     A,#0x30
   \   00005B   7002         JNZ     ??GenericApp_MessageMSGCB_1
    126            P1_0=0;
   \   00005D   C290         CLR     0x90.0
    127            break;
    128            }
    129          }
   \                     ??GenericApp_MessageMSGCB_1:
   \   00005F   740A         MOV     A,#0xa
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   \   000064   7F03         MOV     R7,#0x3
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000069                REQUIRE _A_P1
    130          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    132          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    133            unsigned char theMessageData[11] = "SB01000000";
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#((`?<Constant "SB01000000">` >> 8) & 0xff)
   \   000016   7582..       MOV     DPL,#(`?<Constant "SB01000000">` & 0xff)
   \   000019   740B         MOV     A,#0xb
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    134            SetMessage(theMessageData,11);
   \   00001E                ; Setup parameters for call to function SetMessage
   \   00001E   7C0B         MOV     R4,#0xb
   \   000020   FD           MOV     R5,A
   \   000021   740C         MOV     A,#0xc
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   \   00002A   12....       LCALL   ??SetMessage?relay
    135            afAddrType_t my_DstAddr;
    136            my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    137            my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
   \   000035   7409         MOV     A,#0x9
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   740A         MOV     A,#0xa
   \   00003C   F0           MOVX    @DPTR,A
    138            my_DstAddr.addr.shortAddr=0xFFFF;
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   74FF         MOV     A,#-0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    139            AF_DataRequest(&my_DstAddr
    140            ,&GenericApp_epDesc
    141            ,GENERICAPP_CLUSTERID
    142            ,osal_strlen("SB01000000")+1
    143            ,theMessageData
    144            ,&GenericApp_TransID
    145            ,AF_DISCV_ROUTE
    146            ,AF_DEFAULT_RADIUS);
   \   000048                ; Setup parameters for call to function AF_DataRequest
   \   000048   75..1E       MOV     ?V0 + 0,#0x1e
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   75....       MOV     ?V0 + 0,#(GenericApp_TransID & 0xff)
   \   000053   75....       MOV     ?V0 + 1,#((GenericApp_TransID >> 8) & 0xff)
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   740F         MOV     A,#0xf
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   8582..       MOV     ?V0 + 0,DPL
   \   000063   8583..       MOV     ?V0 + 1,DPH
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B                ; Setup parameters for call to function osal_strlen
   \   00006B   7A..         MOV     R2,#(`?<Constant "SB01000000">_1` & 0xff)
   \   00006D   7B..         MOV     R3,#((`?<Constant "SB01000000">_1` >> 8) & 0xff)
   \   00006F   12....       LCALL   ??osal_strlen?relay
   \   000072   8A..         MOV     ?V0 + 0,R2
   \   000074   8B..         MOV     ?V0 + 1,R3
   \   000076   7401         MOV     A,#0x1
   \   000078   25..         ADD     A,?V0 + 0
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V0 + 1
   \   00007F   F5..         MOV     ?V0 + 1,A
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   75..01       MOV     ?V0 + 0,#0x1
   \   000089   75..00       MOV     ?V0 + 1,#0x0
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7920         MOV     R1,#0x20
   \   000093   7C..         MOV     R4,#(GenericApp_epDesc & 0xff)
   \   000095   7D..         MOV     R5,#((GenericApp_epDesc >> 8) & 0xff)
   \   000097   7409         MOV     A,#0x9
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   AA82         MOV     R2,DPL
   \   00009E   AB83         MOV     R3,DPH
   \   0000A0   12....       LCALL   ??AF_DataRequest?relay
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    147          }
   \   0000A8   7417         MOV     A,#0x17
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD                REQUIRE ?Subroutine0
   \   0000AD                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    148          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    149          void SetMessage(unsigned char temp[],int n)
   \                     SetMessage:
    150          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    151            P2DIR |= 0x01;
   \   000009   43FF01       ORL     0xff,#0x1
    152            P1DIR |= 0x07;
   \   00000C   43FE07       ORL     0xfe,#0x7
   \   00000F   E5FE         MOV     A,0xfe
    153            P0SEL &=0x20;
   \   000011   53F320       ANL     0xf3,#0x20
   \   000014   E5F3         MOV     A,0xf3
    154            ALARM =0;
   \   000016   C2A0         CLR     0xa0.0
    155            LED2=1;
   \   000018   D292         SETB    0x90.2
    156              if(P0_7)
   \   00001A   A287         MOV     C,0x80.7
   \   00001C   500D         JNC     ??SetMessage_0
    157              {
    158              	temp[4]='1';
   \   00001E   7431         MOV     A,#0x31
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    159                  LED2=0;
   \   000029   C292         CLR     0x90.2
    160              }
    161              if(!(P0&0x02))
   \                     ??SetMessage_0:
   \   00002B   A281         MOV     C,0x80.1
   \   00002D   400C         JC      ??SetMessage_1
    162                {
    163                  temp[5]='1';
   \   00002F   7431         MOV     A,#0x31
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    164                }
    165              if(!(P1_0))
   \                     ??SetMessage_1:
   \   00003B   A290         MOV     C,0x90.0
   \   00003D   400D         JC      ??SetMessage_2
    166              {
    167                temp[6]='1';
   \   00003F   7431         MOV     A,#0x31
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
    168              }
    169              if(P0_5)
   \                     ??SetMessage_2:
   \   00004C   A285         MOV     C,0x80.5
   \   00004E   5012         JNC     ??SetMessage_3
    170              {
    171               temp[7]='1';
   \   000050   7431         MOV     A,#0x31
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
    172               ALARM= 1;
   \   00005E   D2A0         SETB    0xa0.0
   \   000060   8006         SJMP    ??SetMessage_4
    173              }
    174            else  if(!P0_5)
   \                     ??SetMessage_3:
   \   000062   A285         MOV     C,0x80.5
   \   000064   4002         JC      ??SetMessage_4
    175              {
    176                ALARM =0;
   \   000066   C2A0         CLR     0xa0.0
    177          }
    178            temp[8]=(uchar)getVoltage();
   \                     ??SetMessage_4:
   \   000068   EE           MOV     A,R6
   \   000069   2408         ADD     A,#0x8
   \   00006B   F8           MOV     R0,A
   \   00006C   EF           MOV     A,R7
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F9           MOV     R1,A
   \   000070   88..         MOV     ?V0 + 0,R0
   \   000072   89..         MOV     ?V0 + 1,R1
   \   000074                ; Setup parameters for call to function getVoltage
   \   000074   12....       LCALL   ??getVoltage?relay
   \   000077   E9           MOV     A,R1
   \   000078   85..82       MOV     DPL,?V0 + 0
   \   00007B   85..83       MOV     DPH,?V0 + 1
   \   00007E   F0           MOVX    @DPTR,A
    179            temp[9]=temp[8]%10+0x30;
   \   00007F   FA           MOV     R2,A
   \   000080   75F00A       MOV     B,#0xa
   \   000083   84           DIV     AB
   \   000084   E5F0         MOV     A,B
   \   000086   2430         ADD     A,#0x30
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   F0           MOVX    @DPTR,A
    180            temp[8]=temp[8]/10+0x30;
   \   000096   75F00A       MOV     B,#0xa
   \   000099   EA           MOV     A,R2
   \   00009A   84           DIV     AB
   \   00009B   2430         ADD     A,#0x30
   \   00009D   85..82       MOV     DPL,?V0 + 0
   \   0000A0   85..83       MOV     DPH,?V0 + 1
   \   0000A3   F0           MOVX    @DPTR,A
    181          }
   \   0000A4   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000A7                REQUIRE _A_P0
   \   0000A7                REQUIRE _A_P1
   \   0000A7                REQUIRE _A_P2
   \   0000A7                REQUIRE P0SEL
   \   0000A7                REQUIRE P1DIR
   \   0000A7                REQUIRE P2DIR

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getVoltage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getVoltage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SB01000000">`:
   \   000000   53423031     DB "SB01000000"
   \            30303030
   \            303000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SB01000000">_1`:
   \   000000   53423031     DB "SB01000000"
   \            30303030
   \            303000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_21:
   \   000000   21000000     DD 33

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1fff:
   \   000000   FF1F0000     DD 8191

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    2      0      0
       -> afRegister                    4      0      0
     GenericApp_MessageMSGCB            0      0     36
       -> osal_memcpy                   0      0     48
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> GenericApp_MessageMSGCB       0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> osal_start_timerEx            0      0     24
     GenericApp_SendTheMessage          2      0     54
       -> SetMessage                    0      0     66
       -> osal_strlen                   0      0     76
       -> AF_DataRequest                0      0     84
     SetMessage                         1      0     43
       -> getVoltage                    0      0     20
     getVoltage                         0      0     26


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _A_P0                                1
     P0INP                                1
     _A_P1                                1
     _A_P2                                1
     ADCCON1                              1
     ADCCON3                              1
     ADCL                                 1
     ADCH                                 1
     ADCCFG                               1
     P0SEL                                1
     P1DIR                                1
     P2DIR                                1
     getVoltage                          97
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_TransID                   1
     GenericApp_NwkState                  1
     GenericApp_Init                     65
     GenericApp_ProcessEvent            155
     GenericApp_MessageMSGCB            105
     GenericApp_SendTheMessage          173
     ?Subroutine0                         5
     SetMessage                         167
     ??getVoltage?relay                   6
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_MessageMSGCB?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ??SetMessage?relay                   6
     ?<Constant "SB01000000">            11
     ?<Constant "SB01000000">_1          11
     __Constant_21                        4
     __Constant_1fff                      4

 
 767 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
  12 bytes in segment SFR_AN
  44 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 803 bytes of CODE  memory
  36 bytes of CONST memory (+  8 bytes shared)
   0 bytes of DATA  memory (+ 12 bytes shared)
   9 bytes of XDATA memory

Errors: none
Warnings: none
