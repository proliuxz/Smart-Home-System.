///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               22/Aug/2013  15:11:53 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\Te\Source\Enddevice.c       /
//    Command line       =  -f "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\Te\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ            /
//                          -DROOT=__near_func -DBLINK_LEDS) -f "D:\Texas     /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\Tools\CC2530DB\ /
//                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0  /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\Texas                  /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\Source\Enddevice.c" -D            /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\Te\CC2530DB\EndDeviceEB\Li /
//                          st\" -lA "D:\Texas Instruments\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\EndDe /
//                          viceEB\List\" --diag_suppress Pe001,Pa010 -o      /
//                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\Te\CC2530DB\EndDeviceEB\Ob /
//                          j\" -e --require_prototypes --debug --core=plain  /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\" -I "D:\Texas           /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\SOURCE\" -I           /
//                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\Te\CC2530DB\..\..\..\ZMAIN /
//                          \TI2530DB\" -I "D:\Texas                          /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MT\" -I "D:\Texas Instruments\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\HAL\INCLUDE\" -I "D:\Texas  /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\HAL\TARGET\CC2530EB\" -I "D:\Texas              /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\OSAL\MCU\CCSOC\" -I "D:\Texas                   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\OSAL\INCLUDE\" -I "D:\Texas                     /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\AF\" -I "D:\Texas                         /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\NWK\" -I "D:\Texas                        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SEC\" -I "D:\Texas                        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SAPI\" -I "D:\Texas                       /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SYS\" -I "D:\Texas                        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\ZDO\" -I "D:\Texas                        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\F8W\" -I "D:\Texas                         /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\" -I "D:\Texas Instruments\ZStack-CC2530-2 /
//                          .3.0-1.4.0\Projects\zstack\Samples\Te\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I       /
//                          "D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\Te\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\SERVICES\SDATA\" -I "D:\Texas         /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\INCLUDE\" -I "D:\Texas                      /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\HIGH_LEVEL\" -I "D:\Texas                   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\LOW_LEVEL\srf04\" -I "D:\Texas              /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\Te\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I            /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.3\8051\INC\" -I "C:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\Te\CC2530DB\EndDeviceEB\Lis /
//                          t\Enddevice.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Enddevice

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??GenericApp_MessageMSGCB?relay
        EXTERN ??GenericApp_SendTheMessage?relay
        EXTERN ??SetMessage?relay
        EXTERN ??getVoltage?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_MessageMSGCB?relay
        FUNCTION ??GenericApp_MessageMSGCB?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC ??GenericApp_SendTheMessage?relay
        FUNCTION ??GenericApp_SendTheMessage?relay,0203H
        PUBLIC ??SetMessage?relay
        FUNCTION ??SetMessage?relay,0203H
        PUBLIC ??getVoltage?relay
        FUNCTION ??getVoltage?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC GenericApp_MessageMSGCB
        FUNCTION GenericApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_SendTheMessage
        FUNCTION GenericApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBLIC SetMessage
        FUNCTION SetMessage,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_1fff
        PUBWEAK __Constant_21
        PUBLIC getVoltage
        FUNCTION getVoltage,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_set_event      SYMBOL "osal_set_event"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_memcpy         SYMBOL "osal_memcpy"
osal_strlen         SYMBOL "osal_strlen"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_MessageMSGCB SYMBOL "GenericApp_MessageMSGCB"
??GenericApp_MessageMSGCB?relay SYMBOL "?relay", GenericApp_MessageMSGCB
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
GenericApp_SendTheMessage SYMBOL "GenericApp_SendTheMessage"
??GenericApp_SendTheMessage?relay SYMBOL "?relay", GenericApp_SendTheMessage
SetMessage          SYMBOL "SetMessage"
??SetMessage?relay  SYMBOL "?relay", SetMessage
getVoltage          SYMBOL "getVoltage"
??getVoltage?relay  SYMBOL "?relay", getVoltage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// D:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Te\Source\Enddevice.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "Common.h"
//    7 #include "DebugTrace.h"
//    8 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//    9 #include <string.h>
//   10 #include "gm.h"

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant unsigned char getVoltage(void)
getVoltage:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function getVoltage
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        ORL     0xf2,#0x10
        ORL     0x8f,#0x10
        ORL     0xb6,#0x84
        MOV     A,0xb6
        ORL     0xb4,#0x40
??getVoltage_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??getVoltage_0
        MOV     A,0xba
        RRC     A
        RRC     A
        ANL     A,#0x3f
        MOV     R2,A
        MOV     R4,0xbb
        MOV     DPL,R4
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,R2
        ORL     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     DPTR,#__Constant_21
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_1fff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        MOV     R1,?V0 + 0
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0INP
        REQUIRE ADCCON1
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH
        REQUIRE ADCCFG
//   11 #define LED2 P1_2
//   12 #define ECHO P1_3
//   13 #define ALARM P2_0
//   14 #define uchar unsigned char
//   15 #define uint unsigned int
//   16 
//   17 #define SEND_DATA_EVENT 0x01
//   18 
//   19 #if !defined( WIN32 )
//   20   #include "OnBoard.h"
//   21 #endif
//   22 
//   23 /* HAL */
//   24 #include "hal_lcd.h"
//   25 #include "hal_led.h"
//   26 #include "hal_key.h"
//   27 #include "hal_uart.h"
//   28 
//   29 #define SEND_DATA_EVENT 0x01
//   30 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   31 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//   32 {
//   33   GENERICAPP_CLUSTERID
//   34 };
//   35 void SetMessage(unsigned char temp[],int n);
//   36 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   37 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DW 3844, 1
        DB 0, 0
        DW 0H
        DB 1
        DW GenericApp_ClusterList
//   38 {
//   39   GENERICAPP_ENDPOINT,              //  int Endpoint;
//   40   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//   41   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   42   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   43   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//   44   
//   45   0,
//   46   (cId_t*)NULL,
//   47   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   48   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//   49 };
//   50 
//   51 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   52 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   53 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   54 byte GenericApp_TransID; 
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   55 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   56 void SampleApp_HandleKeys(uint8 shift,uint8 keys);
//   57 void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
//   58 void GenericApp_SendTheMessage(void);
//   59 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 void GenericApp_Init( byte task_id )
GenericApp_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GenericApp_Init
//   61 {
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   62   halUARTCfg_t uartConfig;
//   63   GenericApp_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//   64   GenericApp_NwkState = DEV_INIT;
        MOV     A,#0x1
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//   65   GenericApp_TransID = 0;
        CLR     A
        MOV     DPTR,#GenericApp_TransID
        MOVX    @DPTR,A
//   66 
//   67   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     A,#0xa
        MOV     DPTR,#GenericApp_epDesc
        MOVX    @DPTR,A
//   68   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        MOV     DPTR,#(GenericApp_epDesc + 1)
        MOV     A,#(GenericApp_TaskID & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((GenericApp_TaskID >> 8) & 0xff)
        MOVX    @DPTR,A
//   69   GenericApp_epDesc.simpleDesc
//   70             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        MOV     DPTR,#(GenericApp_epDesc + 3)
        MOV     A,#(GenericApp_SimpleDesc & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((GenericApp_SimpleDesc >> 8) & 0xff)
        MOVX    @DPTR,A
//   71             
//   72   GenericApp_epDesc.latencyReq = noLatencyReqs;
        CLR     A
        MOV     DPTR,#(GenericApp_epDesc + 5)
        MOVX    @DPTR,A
//   73   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#(GenericApp_epDesc & 0xff)
        MOV     R3,#((GenericApp_epDesc >> 8) & 0xff)
        LCALL   ??afRegister?relay
//   74 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   75 
//   76 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
//   78 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   79   afIncomingMSGPacket_t *MSGpkt;
//   80   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,?V0 + 1
        MOV     R1,A
        CLR     A
        JNZ     ??GenericApp_ProcessEvent_0
        MOV     A,R1
??GenericApp_ProcessEvent_0:
        JZ      ??GenericApp_ProcessEvent_1
//   81   {
//   82     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_2
//   83     while ( MSGpkt )
//   84     {
//   85       switch ( MSGpkt->hdr.event )
//   86       {
//   87         case AF_INCOMING_MSG_CMD:
//   88         GenericApp_MessageMSGCB(MSGpkt);
//   89           break;
//   90         case ZDO_STATE_CHANGE:
//   91           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//   92           if (GenericApp_NwkState == DEV_END_DEVICE)
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_4
//   93           {
//   94             osal_set_event(GenericApp_TaskID,SEND_DATA_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//   95           }
//   96           break;
//   97 
//   98         default:
//   99           break;
//  100       }
//  101 
//  102       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  103       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_2:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        JNZ     ??GenericApp_ProcessEvent_5
        MOV     A,R7
??GenericApp_ProcessEvent_5:
        JZ      ??GenericApp_ProcessEvent_6
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for GenericApp_ProcessEvent>_0`:
        DATA
        DB        0
        DB        2
        DB        26
        DW        ??GenericApp_ProcessEvent_7
        DB        209
        DW        ??GenericApp_ProcessEvent_3
        DW        ??GenericApp_ProcessEvent_4
        CODE
??GenericApp_ProcessEvent_7:
        ; Setup parameters for call to function GenericApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GenericApp_MessageMSGCB?relay
        SJMP    ??GenericApp_ProcessEvent_4
//  104     }
//  105     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_6:
        MOV     R2,?V0 + 0
        MOV     A,#-0x80
        XRL     A,?V0 + 1
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_8
//  106   }
//  107   if ( events & SEND_DATA_EVENT )
??GenericApp_ProcessEvent_1:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??GenericApp_ProcessEvent_9
//  108   {
//  109     GenericApp_SendTheMessage();
        ; Setup parameters for call to function GenericApp_SendTheMessage
        LCALL   ??GenericApp_SendTheMessage?relay
//  110     osal_start_timerEx( GenericApp_TaskID,SEND_DATA_EVENT,1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  111     return (events^SEND_DATA_EVENT);
        MOV     A,#0x1
        XRL     A,?V0 + 0
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??GenericApp_ProcessEvent_8
//  112   }
//  113   return 0;
??GenericApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  114 }
//  115 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt)
GenericApp_MessageMSGCB:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function GenericApp_MessageMSGCB
//  117 {
        FUNCALL GenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  118   unsigned char buffer[10];
//  119   switch(pkt->clusterId)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_MessageMSGCB_0:
        JNZ     ??GenericApp_MessageMSGCB_1
//  120   {
//  121   case GENERICAPP_CLUSTERID:
//  122   osal_memcpy(&buffer,pkt->cmd.Data,10);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  123   if(buffer[0]=='1')
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??GenericApp_MessageMSGCB_2
//  124   P1_0=1;
        SETB    0x90.0
        SJMP    ??GenericApp_MessageMSGCB_1
//  125   if(buffer[0]=='0')
??GenericApp_MessageMSGCB_2:
        MOVX    A,@DPTR
        XRL     A,#0x30
        JNZ     ??GenericApp_MessageMSGCB_1
//  126   P1_0=0;
        CLR     0x90.0
//  127   break;
//  128   }
//  129 }
??GenericApp_MessageMSGCB_1:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
//  130 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  131 void GenericApp_SendTheMessage( void )
GenericApp_SendTheMessage:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function GenericApp_SendTheMessage
//  132 {
        FUNCALL GenericApp_SendTheMessage, SetMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  133   unsigned char theMessageData[11] = "SB01000000";
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((`?<Constant "SB01000000">` >> 8) & 0xff)
        MOV     DPL,#(`?<Constant "SB01000000">` & 0xff)
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  134   SetMessage(theMessageData,11);
        ; Setup parameters for call to function SetMessage
        MOV     R4,#0xb
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SetMessage?relay
//  135   afAddrType_t my_DstAddr;
//  136   my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  137   my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  138   my_DstAddr.addr.shortAddr=0xFFFF;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  139   AF_DataRequest(&my_DstAddr
//  140   ,&GenericApp_epDesc
//  141   ,GENERICAPP_CLUSTERID
//  142   ,osal_strlen("SB01000000")+1
//  143   ,theMessageData
//  144   ,&GenericApp_TransID
//  145   ,AF_DISCV_ROUTE
//  146   ,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#(GenericApp_TransID & 0xff)
        MOV     ?V0 + 1,#((GenericApp_TransID >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#(`?<Constant "SB01000000">_1` & 0xff)
        MOV     R3,#((`?<Constant "SB01000000">_1` >> 8) & 0xff)
        LCALL   ??osal_strlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,?V0 + 1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     R1,#0x20
        MOV     R4,#(GenericApp_epDesc & 0xff)
        MOV     R5,#((GenericApp_epDesc >> 8) & 0xff)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  147 }
        MOV     A,#0x17
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  148 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  149 void SetMessage(unsigned char temp[],int n)
SetMessage:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function SetMessage
//  150 { 
        FUNCALL SetMessage, getVoltage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  151   P2DIR |= 0x01;
        ORL     0xff,#0x1
//  152   P1DIR |= 0x07;
        ORL     0xfe,#0x7
        MOV     A,0xfe
//  153   P0SEL &=0x20;
        ANL     0xf3,#0x20
        MOV     A,0xf3
//  154   ALARM =0;
        CLR     0xa0.0
//  155   LED2=1;
        SETB    0x90.2
//  156     if(P0_7)
        MOV     C,0x80.7
        JNC     ??SetMessage_0
//  157     {
//  158     	temp[4]='1';
        MOV     A,#0x31
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  159         LED2=0;
        CLR     0x90.2
//  160     }
//  161     if(!(P0&0x02))
??SetMessage_0:
        MOV     C,0x80.1
        JC      ??SetMessage_1
//  162       {
//  163         temp[5]='1';
        MOV     A,#0x31
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  164       }
//  165     if(!(P1_0))
??SetMessage_1:
        MOV     C,0x90.0
        JC      ??SetMessage_2
//  166     {
//  167       temp[6]='1';
        MOV     A,#0x31
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  168     }
//  169     if(P0_5)
??SetMessage_2:
        MOV     C,0x80.5
        JNC     ??SetMessage_3
//  170     {
//  171      temp[7]='1';
        MOV     A,#0x31
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  172      ALARM= 1;
        SETB    0xa0.0
        SJMP    ??SetMessage_4
//  173     }
//  174   else  if(!P0_5)
??SetMessage_3:
        MOV     C,0x80.5
        JC      ??SetMessage_4
//  175     {
//  176       ALARM =0;
        CLR     0xa0.0
//  177 }
//  178   temp[8]=(uchar)getVoltage();
??SetMessage_4:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function getVoltage
        LCALL   ??getVoltage?relay
        MOV     A,R1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  179   temp[9]=temp[8]%10+0x30;
        MOV     R2,A
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  180   temp[8]=temp[8]/10+0x30;
        MOV     B,#0xa
        MOV     A,R2
        DIV     AB
        ADD     A,#0x30
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  181 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock6
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0SEL
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getVoltage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getVoltage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SB01000000">`:
        DB "SB01000000"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SB01000000">_1`:
        DB "SB01000000"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_21:
        DD 33

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1fff:
        DD 8191

        END
// 
// 767 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//  12 bytes in segment SFR_AN
//  44 bytes in segment XDATA_ROM_C
//   9 bytes in segment XDATA_Z
// 
// 803 bytes of CODE  memory
//  36 bytes of CONST memory (+  8 bytes shared)
//   0 bytes of DATA  memory (+ 12 bytes shared)
//   9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
